{"version":3,"sources":["Micro mouse/Node/Node.jsx","Micro mouse/dijkstra.js","Micro mouse/Micromouse.jsx","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","distanceToFinishNode","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","Math","floor","random","START_NODE_ROW","FINISH_NODE_ROW","START_NODE_COL","FINISH_NODE_COL","abs","isNode","mouseIsPressed","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","changedim","setState","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","clearGrid","nodeClassName","slice","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","Number","value","console","log","onMouseLeave","map","rowIdx","key","nodeIdx","handleMouseEnter","handleMouseUp","type","name","defaultValue","onClick","clearWalls","visualize","newNode","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.3d0e77fc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      distanceToFinishNode,\r\n    } = this.props;\r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}>{distanceToFinishNode}</td>\r\n    );\r\n  }\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from './dijkstra';\r\n\r\nimport './Micromouse.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: Math.floor(Math.random() * 25),\r\n      FINISH_NODE_ROW: Math.floor(Math.random() * 25),\r\n      START_NODE_COL: Math.floor(Math.random() * 35),\r\n      FINISH_NODE_COL: Math.floor(Math.random() * 35),\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n    this.changedim = this.changedim.bind(this);\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    const prob = Math.floor(Math.random() * 11)\r\n    if(prob<2 && (row !== this.state.START_NODE_ROW || row !== this.state.FINISH_NODE_ROW) && (col !== this.state.START_NODE_COL || col !== this.state.FINISH_NODE_COL)){\r\n      return {\r\n        row,\r\n        col,\r\n        isStart:\r\n          row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n        isFinish:\r\n          row === this.state.FINISH_NODE_ROW &&\r\n          col === this.state.FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        distanceToFinishNode:\r\n          Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n          Math.abs(this.state.FINISH_NODE_COL - col),\r\n        isVisited: false,\r\n        isWall: true,\r\n        previousNode: null,\r\n        isNode: true,\r\n      };\r\n    }\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Change Dimensions ********************/\r\n\r\n  changedim() {\r\n    const ROW_COUNT = Number(document.getElementById('row_i').value);\r\n    const COLUMN_COUNT = Number(document.getElementById('col_i').value);\r\n    const START_NODE_ROW= Math.floor(Math.random() * ROW_COUNT)\r\n    const  FINISH_NODE_ROW= Math.floor(Math.random() * ROW_COUNT)\r\n    const  START_NODE_COL= Math.floor(Math.random() * COLUMN_COUNT)\r\n    const  FINISH_NODE_COL= Math.floor(Math.random() * COLUMN_COUNT)\r\n\r\n    this.setState({COLUMN_COUNT,ROW_COUNT,START_NODE_ROW,FINISH_NODE_ROW,START_NODE_COL,FINISH_NODE_COL},() => {\r\n      const grid = this.getInitialGrid();\r\n      this.setState({grid});\r\n    });\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall, distanceToFinishNode} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}\r\n                        distanceToFinishNode={distanceToFinishNode}\r\n                        ></Node>\r\n\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <label>Rows</label>\r\n        <input type=\"number\" id='row_i' name='row_i' defaultValue={this.state.ROW_COUNT} ></input>\r\n        <label>Columns</label>\r\n        <input type=\"number\" id='col_i' name='col_i' defaultValue={this.state.COLUMN_COUNT}></input>\r\n        <div>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={() => this.clearGrid()}>\r\n              Clear Grid\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-warning\"\r\n              onClick={() => this.clearWalls()}>\r\n              Clear Walls\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.visualize()}>\r\n              Search\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.changedim()}>\r\n              Change Dimension\r\n            </button>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Micromouse from './Micro mouse/Micromouse';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Micromouse></Micromouse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\n"],"sourceRoot":""}